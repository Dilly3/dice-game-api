// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dilly3/dice-game-api/db/sqlc (interfaces: IUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	db "github.com/dilly3/dice-game-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockIUser) CompareHashAndPassword(arg0 db.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockIUserMockRecorder) CompareHashAndPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockIUser)(nil).CompareHashAndPassword), arg0, arg1)
}

// HashPassword mocks base method.
func (m *MockIUser) HashPassword(arg0 *db.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HashPassword", arg0)
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIUserMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIUser)(nil).HashPassword), arg0)
}

// VerifyUserData mocks base method.
func (m *MockIUser) VerifyUserData(arg0 *db.RegisterUserDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserData indicates an expected call of VerifyUserData.
func (mr *MockIUserMockRecorder) VerifyUserData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserData", reflect.TypeOf((*MockIUser)(nil).VerifyUserData), arg0)
}
