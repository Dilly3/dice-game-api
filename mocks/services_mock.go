// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dilly3/dice-game-api/service (interfaces: IGameService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/dilly3/dice-game-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockIGameService is a mock of IGameService interface.
type MockIGameService struct {
	ctrl     *gomock.Controller
	recorder *MockIGameServiceMockRecorder
}

// MockIGameServiceMockRecorder is the mock recorder for MockIGameService.
type MockIGameServiceMockRecorder struct {
	mock *MockIGameService
}

// NewMockIGameService creates a new mock instance.
func NewMockIGameService(ctrl *gomock.Controller) *MockIGameService {
	mock := &MockIGameService{ctrl: ctrl}
	mock.recorder = &MockIGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGameService) EXPECT() *MockIGameServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockIGameService) CreateTransaction(arg0 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIGameServiceMockRecorder) CreateTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIGameService)(nil).CreateTransaction), arg0)
}

// CreateUser mocks base method.
func (m *MockIGameService) CreateUser(arg0 db.RegisterUserDto) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIGameServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIGameService)(nil).CreateUser), arg0)
}

// CreditWallet mocks base method.
func (m *MockIGameService) CreditWallet(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreditWallet indicates an expected call of CreditWallet.
func (mr *MockIGameServiceMockRecorder) CreditWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditWallet", reflect.TypeOf((*MockIGameService)(nil).CreditWallet), arg0, arg1)
}

// CreditWalletForWin mocks base method.
func (m *MockIGameService) CreditWalletForWin(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditWalletForWin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreditWalletForWin indicates an expected call of CreditWalletForWin.
func (mr *MockIGameServiceMockRecorder) CreditWalletForWin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditWalletForWin", reflect.TypeOf((*MockIGameService)(nil).CreditWalletForWin), arg0, arg1)
}

// DebitWallet mocks base method.
func (m *MockIGameService) DebitWallet(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebitWallet indicates an expected call of DebitWallet.
func (mr *MockIGameServiceMockRecorder) DebitWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitWallet", reflect.TypeOf((*MockIGameService)(nil).DebitWallet), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockIGameService) GetAllUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIGameServiceMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIGameService)(nil).GetAllUsers), arg0, arg1)
}

// GetTransactionHistory mocks base method.
func (m *MockIGameService) GetTransactionHistory(arg0 string, arg1 int) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockIGameServiceMockRecorder) GetTransactionHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockIGameService)(nil).GetTransactionHistory), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockIGameService) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIGameServiceMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIGameService)(nil).GetUserByUsername), arg0, arg1)
}

// GetWalletBalance mocks base method.
func (m *MockIGameService) GetWalletBalance(arg0 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockIGameServiceMockRecorder) GetWalletBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockIGameService)(nil).GetWalletBalance), arg0)
}

// UpdateGameMode mocks base method.
func (m *MockIGameService) UpdateGameMode(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameMode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameMode indicates an expected call of UpdateGameMode.
func (mr *MockIGameServiceMockRecorder) UpdateGameMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameMode", reflect.TypeOf((*MockIGameService)(nil).UpdateGameMode), arg0, arg1)
}
