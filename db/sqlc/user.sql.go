// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"

	"github.com/dilly3/dice-game-api/models"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  firstname, lastname, username, password
) VALUES (
  $1, $2 , $3 , $4 
)
RETURNING id, firstname, lastname, username, game_mode, password, created_at
`



func (q *Queries) CreateUser(ctx context.Context, arg models.CreateUserParams) (models.User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Password,
	)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.GameMode,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, username, game_mode, password, created_at FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (models.User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.GameMode,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, firstname, lastname, username, game_mode, password, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (models.User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.GameMode,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, firstname, lastname, username, game_mode, password, created_at FROM users
WHERE username = $1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (models.User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.GameMode,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, firstname, lastname, username, game_mode, password, created_at FROM users
ORDER BY lastname ASC
LIMIT $1
OFFSET $2
`



func (q *Queries) ListUsers(ctx context.Context, arg models.ListUsersParams) ([]models.User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.User
	for rows.Next() {
		var i models.User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.GameMode,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserGameMode = `-- name: UpdateUserGameMode :exec
UPDATE users 
 set game_mode = $2  
WHERE username = $1
`



func (q *Queries) UpdateUserGameMode(ctx context.Context, arg models.UpdateUserGameModeParams) error {
	_, err := q.db.ExecContext(ctx, updateUserGameMode, arg.Username, arg.GameMode)
	return err
}
