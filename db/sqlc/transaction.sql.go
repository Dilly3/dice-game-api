// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    user_id, amount, transaction_type
) VALUES (
  $1, $2 , $3
)
RETURNING id, user_id, amount, transaction_type, created_at
`

type CreateTransactionParams struct {
	UserID          sql.NullInt64  `json:"user_id"`
	Amount          int64          `json:"amount"`
	TransactionType sql.NullString `json:"transaction_type"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.UserID, arg.Amount, arg.TransactionType)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, amount, transaction_type, created_at FROM transactions
WHERE user_id = $1
AND transaction_type = $2
`

type GetTransactionParams struct {
	UserID          sql.NullInt64  `json:"user_id"`
	TransactionType sql.NullString `json:"transaction_type"`
}

func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, arg.UserID, arg.TransactionType)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionByUserId = `-- name: GetTransactionByUserId :one
SELECT id, user_id, amount, transaction_type, created_at FROM transactions
WHERE user_id = $1
`

func (q *Queries) GetTransactionByUserId(ctx context.Context, userID sql.NullInt64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByUserId, userID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}
