// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/dilly3/dice-game-api/models"
	
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    user_id, amount, balance , transaction_type, username
) VALUES (
  $1, $2 , $3 , $4 , $5
)
RETURNING id, user_id, username, amount, balance, transaction_type, created_at
`



func (q *Queries) CreateTransaction(ctx context.Context, arg models.CreateTransactionParams) (models.Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Balance,
		arg.TransactionType,
		arg.Username,
	)
	var i models.Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Amount,
		&i.Balance,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, username, amount, balance, transaction_type, created_at FROM transactions
WHERE user_id = $1
AND transaction_type = $2
`



func (q *Queries) GetTransaction(ctx context.Context, arg models.GetTransactionParams) (models.Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, arg.UserID, arg.TransactionType)
	var i models.Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Amount,
		&i.Balance,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsByUsername = `-- name: GetTransactionsByUsername :many
SELECT id, user_id, username, amount, balance, transaction_type, created_at FROM transactions
WHERE username = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTransactionsByUsername(ctx context.Context, username string) ([]models.Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Transaction
	for rows.Next() {
		var i models.Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Amount,
			&i.Balance,
			&i.TransactionType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
  set balance = $2 ,
  amount = $3
WHERE username = $1
`



func (q *Queries) UpdateTransaction(ctx context.Context, arg models.UpdateTransactionParams ) error {
	_, err := q.db.ExecContext(ctx, updateTransaction, arg.Username, arg.Balance, arg.Amount)
	return err
}
